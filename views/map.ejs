<html>
<head>
<title>Map</title>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
  <meta charset="utf-8">
  <style>
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    #map {
      height: 100%;
    }
    .control {
      margin-top: 10px;
      border: 1px solid transparent;
      border-radius: 2px 0 0 2px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      height: 32px;
      outline: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      text-align: center;
    }
    #origin-input,
    #destination-input {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      margin-left: 10%;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      width: 80%;
      display: block;
    }
    .ecost {
      visibility: hidden;
      position: absolute;
      top: 79%;
      left: 50%;
      padding: .3em 0.6em;
      -webkit-transform: translate(-50%, -50%);
      -moz-transform: translate(-50%, -50%);
      -ms-transform: translate(-50%, -50%);
      -o-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
      background-color: #4d90fe;
      border-radius: 2px;
      text-align: center;
      z-index: 11;
      line-height: normal;
      opacity: 0.88;
    }
    .text  {
      color: #fff;
      font-family: Roboto;
      font-size: 8px;
      vertical-align: middle;
    }
    .costitem {
      vertical-align: middle;
    }
    .legendItem {
      max-width: 20%;
      min-width: 3%;
    }
    #cost_walking_color {
      background-color: #BC41E8;
    }
    #cost_transit_color {
      background-color: #0095FF;
    }
    #cost_driving_color {
      background-color: #0CE819;
    }
    #cost_bicycling_color {
      background-color: #FFD20D;
    }
    .flex-center-vertically {
      display: flex;
    }
  </style>
</head>
<body>
  <input id="origin-input" class="control" type="text"
    placeholder="Origin">
  <input id="destination-input" class="control" type="text"
    placeholder="Destination">

  <div id="popup" class="ecost text">
    <table>
      <tr>
        <th></th>
        <th class="transitHeading, legendItem"></th>
        <th class="transitHeading">Time</th>
        <th class="transitHeading">Distance</th>
        <th class="transitHeading">Money</th>
        <th class="transitHeading">Carbon</th>
      </tr>
      <tr>
        <td class="transitTitle">Driving</td>
        <td id="cost_driving_color" class="legendItem">    </td>
        <td><div id="cost_driving_time" class="costitem">-</div></td>
        <td><div id="cost_driving_distance" class="costitem">-</div></td>
        <td><div id="cost_driving_money" class="costitem">-</div></td>
        <td><div id="cost_driving_carbon" class="costitem">-</div></td>
      </tr>
      <tr>
        <td class="transitTitle">Transit</td>
        <td id="cost_transit_color" class="legendItem">    </td>
        <td><div id="cost_transit_time" class="costitem">-</div></td>
        <td><div id="cost_transit_distance" class="costitem">-</div></td>
        <td><div id="cost_transit_money" class="costitem">-</div></td>
        <td><div id="cost_transit_carbon" class="costitem">-</div></td>
      </tr>
        <td class="transitTitle">Bicycling</td>
        <td id="cost_bicycling_color" class="legendItem">    </td>
        <td><div id="cost_bicycling_time" class="costitem">-</div></td>
        <td><div id="cost_bicycling_distance" class="costitem">-</div></td>
        <td><div id="cost_bicycling_money" class="costitem">-</div></td>
        <td><div id="cost_bicycling_carbon" class="costitem">-</div></td>
      </tr>
      <tr>
        <td class="transitTitle">Walking</td>
        <td id="cost_walking_color" class="legendItem">    </td>
        <td><div id="cost_walking_time" class="costitem">-</div></td>
        <td><div id="cost_walking_distance" class="costitem">-</div></td>
        <td><div id="cost_walking_money" class="costitem">-</div></td>
        <td><div id="cost_walking_carbon" class="costitem">-</div></td>
      </tr>
    </table>
  </div>

  <div id="map"></div>

  <script>
    var directionsDisplayWalking;
    var directionsDisplayTransit;
    var directionsDisplayDriving;
    var directionsDisplayBicycling;
    function initMap() {
      var origin_place_id = null;
      var destination_place_id = null;
      var travel_mode = google.maps.TravelMode.DRIVING;
      var map = new google.maps.Map(document.getElementById('map'), {
        mapTypeId: 'roadmap',
        mapTypeControl: false,
        center: {lat: 45.57, lng: -122.72},
        zoom: 13
      });
      var directionsService = new google.maps.DirectionsService;
      var directionsDisplay = new google.maps.DirectionsRenderer;
      directionsDisplay.setMap(map);
      var origin_input = document.getElementById('origin-input');
      var destination_input = document.getElementById('destination-input');
      var modes = document.getElementById('mode-selector');
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
      map.controls[google.maps.ControlPosition.LEFT_TOP].push(destination_input);
      map.controls[google.maps.ControlPosition.TOP_CENTER].push(modes);
      var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
      origin_autocomplete.bindTo('bounds', map);
      var destination_autocomplete = new google.maps.places.Autocomplete(destination_input);
      destination_autocomplete.bindTo('bounds', map);

      function expandViewportToFitPlace(map, place) {
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(17);
        }
      }

      origin_autocomplete.addListener('place_changed', function() {
        var place = origin_autocomplete.getPlace();
        if (!place.geometry) {
          window.alert("Autocomplete's returned place contains no geometry");
          return;
        }
        expandViewportToFitPlace(map, place);
        origin_place_id = place.place_id;
        drawDirections(directionsService);
      });

      destination_autocomplete.addListener('place_changed', function() {
        var place = destination_autocomplete.getPlace();
        if (!place.geometry) {
          window.alert("Autocomplete's returned place contains no geometry");
          return;
        }
        expandViewportToFitPlace(map, place);
        destination_place_id = place.place_id;
        drawDirections(directionsService);
      });

      function drawDirections(directionsService) {
        if (!(origin_place_id  && destination_place_id && directionsService)){
          return; 
        }
        var strokeWeight = 4.5;
        var polylineOptionsWalking = {
              strokeColor: '#BC41E8',
              strokeOpacity: 0.7,
              strokeWeight: strokeWeight
        };
        var polylineOptionsTransit = {
              strokeColor: '#0095FF',
              strokeOpacity: 0.7,
              strokeWeight: strokeWeight
        };
        var polylineOptionsDriving = {
              strokeColor: '#0CE819',
              strokeOpacity: 0.7,
              strokeWeight: strokeWeight
        };
        var polylineOptionsBicycling = {
              strokeColor: '#FFD20D',
              strokeOpacity: 0.7,
              strokeWeight: strokeWeight
        };

        if (directionsDisplayWalking){
          directionsDisplayWalking.setMap(null); 
        }
        directionsDisplayWalking = new google.maps.DirectionsRenderer({
          suppressMarkers: false, 
          polylineOptions: polylineOptionsWalking
        });
        directionsDisplayWalking.setMap(map);

        if (directionsDisplayTransit){
          directionsDisplayTransit.setMap(null);
        } 
        directionsDisplayTransit = new google.maps.DirectionsRenderer({
          suppressMarkers: false, 
          polylineOptions: polylineOptionsTransit
        });
        directionsDisplayTransit.setMap(map);

        if (directionsDisplayDriving){
          directionsDisplayDriving.setMap(null);
        }
        directionsDisplayDriving = new google.maps.DirectionsRenderer({
          suppressMarkers: false, 
          polylineOptions: polylineOptionsDriving
        });
        directionsDisplayDriving.setMap(map);
        
        if (directionsDisplayBicycling){
          directionsDisplayBicycling.setMap(null);
        }
        directionsDisplayBicycling = new google.maps.DirectionsRenderer({
          suppressMarkers: false, 
          polylineOptions: polylineOptionsBicycling
        });
        directionsDisplayBicycling.setMap(map);

        route(origin_place_id, destination_place_id, google.maps.TravelMode.WALKING,
              directionsService, directionsDisplayWalking);
        route(origin_place_id, destination_place_id, google.maps.TravelMode.TRANSIT,
              directionsService, directionsDisplayTransit);
        route(origin_place_id, destination_place_id, google.maps.TravelMode.DRIVING,
              directionsService, directionsDisplayDriving);
        route(origin_place_id, destination_place_id, google.maps.TravelMode.BICYCLING,
              directionsService, directionsDisplayBicycling);
      };

      function route(origin_place_id, destination_place_id, travel_mode, directionsService, directionsDisplay) {
        if (!origin_place_id || !destination_place_id) {
          return;
        }
        directionsService.route({
          origin: {'placeId': origin_place_id},
          destination: {'placeId': destination_place_id},
          travelMode: travel_mode
        }, function(response, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            directionsDisplay.setDirections(response);
            document.getElementById("popup").style.visibility = "visible";
            
            populatePopup(response.routes, travel_mode);
          } else {
            var cells = document.getElementsByClassName('costitem');
           for (var index in cells)
            {
              var entry = cells[index];
              entry.innerHTML = '-';
            }
          }
        });
      }

      function populatePopup(response, travelmode) {
        var costPerMile, fare, time, money, distance;
        var metersPerMile = 0.000621371;
        costPerMile = 0.54;
        switch(travelmode) {
        case google.maps.TravelMode.DRIVING:
            time = response[0].legs[0].duration.text;
            money = parseFloat(response[0].legs[0].distance.value * metersPerMile * costPerMile).toFixed(2);
            distance = response[0].legs[0].distance.text;
            distance2 = response[0].legs[0].distance.value;
            document.getElementById("cost_driving_time").innerHTML = time;
            document.getElementById("cost_driving_money").innerHTML = "$" + money;
            document.getElementById("cost_driving_distance").innerHTML = distance;
            document.getElementById("cost_driving_carbon").innerHTML= (distance2 * metersPerMile * 0.411 * 2.2).toFixed(2) + " lbs" ;
            
            break;
        case google.maps.TravelMode.TRANSIT:
            if(response[0].fare === undefined)
              fare = '-';
            else
              fare = response[0].fare.text;
            time = response[0].legs[0].duration.text;
            distance = response[0].legs[0].distance.text;
            distance2 = response[0].legs[0].distance.value;
            document.getElementById("cost_transit_money").innerHTML = fare;
            document.getElementById("cost_transit_time").innerHTML = time;
            document.getElementById("cost_transit_distance").innerHTML = distance;
            document.getElementById("cost_transit_carbon").innerHTML = (distance2 * metersPerMile * 0.411 * 2.2 / 2.0).toFixed(2) + " lbs";
            break;
        case google.maps.TravelMode.BICYCLING:
            time = response[0].legs[0].duration.text;
            distance = response[0].legs[0].distance.text;
            distance2 = response[0].legs[0].distance.value;
            document.getElementById("cost_bicycling_money").innerHTML = "$0.00";
            document.getElementById("cost_bicycling_time").innerHTML = time;
            document.getElementById("cost_bicycling_distance").innerHTML = distance;
            document.getElementById("cost_bicycling_carbon").innerHTML= (distance2 * metersPerMile * 0.050 * 2.2).toFixed(2) + " lbs" ;
            
            break;
        case google.maps.TravelMode.WALKING:
            time = response[0].legs[0].duration.text; // miles and mins
            distance = response[0].legs[0].distance.text; // miles
            distance2 = response[0].legs[0].distance.value;
            document.getElementById("cost_walking_money").innerHTML = "$0.00";
            document.getElementById("cost_walking_time").innerHTML = time;
            document.getElementById("cost_walking_distance").innerHTML = distance;
            document.getElementById("cost_walking_carbon").innerHTML= (distance2 * metersPerMile * 1.0 / 7.0).toFixed(2) + " lbs" ;
            break;
        }
      }
    }
  </script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDCu3w5-56_sl6eCbmxaN5HAoSNbHWbIrE&libraries=places&callback=initMap" async defer>
  </script>
</body>
</html>